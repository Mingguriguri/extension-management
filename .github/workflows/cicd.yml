name: CI/CD to EC2

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. 코드 체크아웃
      - uses: actions/checkout@v3

      # 2. JDK 설정 (Gradle용)
      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      # 3. 프로젝트 빌드
      - name: Build with Gradle
        run: ./gradlew clean bootJar -x test

      # 4. 아티팩트 업로드
      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: build/libs/*.jar

     # 5. SSH 키 로드
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.1  # ← 존재하는 latest tag로 변경 :contentReference[oaicite:0]{index=0}
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      # 6. EC2에 .env 생성
      - name: Generate .env on EC2
        env:
          RDS_HOST:     ${{ secrets.RDS_HOST }}
          RDS_PORT:     ${{ secrets.RDS_PORT }}
          RDS_DB_NAME:  ${{ secrets.RDS_DB_NAME }}
          RDS_USERNAME: ${{ secrets.RDS_USERNAME }}
          RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/ec2-user/extension-management
            cat > .env <<EOL
            RDS_HOST=${RDS_HOST}
            RDS_PORT=${RDS_PORT}
            RDS_DB_NAME=${RDS_DB_NAME}
            RDS_USERNAME=${RDS_USERNAME}
            RDS_PASSWORD=${RDS_PASSWORD}
            EOL
          EOF

      # 7. EC2에 도커 컴포즈 배포
      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
            cd /home/ec2-user/extension-management
            git pull origin main
            docker-compose pull
            docker-compose build
            docker-compose up -d
          EOF
